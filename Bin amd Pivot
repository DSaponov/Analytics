# бинаризация и сортировка бинов

def bins(df, col, q):
    
    """Discretize variable into equal-sized buckets based on rank or based on sample quantiles. Sorts the bins in the correct order

    Parameters:
    df: DataFrame
    col: column for binarization
    q: Number of quantiles. 10 for deciles, 4 for quartiles, etc. 
        Alternately array of quantiles, e.g. [0, .25, .5, .75, 1.] for quartiles

    Returns:
    pd.Categorical """
    
    df['bin']=pd.qcut(df[col].fillna(0), q,  duplicates='drop').astype(str)
    index=df['bin'].value_counts().index
    first_number = index.str.extract('\((.*),', expand=False).astype(float)
    categories = pd.Series(first_number, index=index).sort_values().index
    return pd.Categorical(df.bin, categories, ordered=False)


################--СВОДНАЯ ТАБЛИЦА--########################
def crosstab_t2(df,  rows, cols, values, aggfunc='mean', sort_count=True, column_percent=True, total=True):
    
    """pivot table

    Parameters:
    df: DataFrame
    rows: Набор переменных строки
    cols: Набор переменных столбца
    values: если aggfunc='mean', указываем среднее от какой переменной считаем. Например, "TYPE" {'Churn':1, 'Active':0} - доля оттока
    aggfunc: 'mean', 'count'
    sort_count: boolean, default True, Сортировка строк по убыванию частот
    column_percent: boolean, default True, Проценты по столбцу. Если True, то обычно aggfunc='count' 
    total: boolean, default True, можно отключить первые два столбца "Всего"

    Returns:
    pd.DataFrame """
    
    
    if column_percent==True:
        normalize='columns'
    else:
        normalize=False
    crosstab=pd.DataFrame()
    for col in cols:
        cro=pd.DataFrame()
        tot=pd.DataFrame()
        for row in rows:           
            cr=pd.crosstab(df[row], df[col], values=df[values], aggfunc=aggfunc, margins=False, normalize=normalize).sort_index()
            t=pd.concat([
                    df[row].value_counts().rename('count'),
                    df[row].value_counts(normalize=True).rename('percent')], axis=1).sort_index() 
                       
            col_val_lab=cr.columns
            cr = cr.T.reset_index(drop=True).T
            cr['var']=row 
            cr.index.names = ['index']
            cr=cr.reset_index().sort_values('index') 
            cro=pd.concat([cro, cr])
           
            
            t['var']=row
            t.index.names = ['index']
            t=t.reset_index().sort_values('index')                     
            tot=pd.concat([tot, t]) 
         
        tot=tot.set_index(['var','index']) 
        cro=cro.set_index(['var','index'])
        
        col_varlab = [col]
        col_vallab = col_val_lab
        ind=pd.MultiIndex.from_product([col_varlab, col_vallab], names=['col_varlab', 'col_vallab'])
        
        cro.columns=ind
        crosstab=pd.concat([crosstab, cro], axis=1, sort=False) 

    col_varlab = ['Всего']
    col_vallab = ['count', 'percent']
    ind=pd.MultiIndex.from_product([col_varlab, col_vallab], names=['col_varlab', 'col_vallab'])  
    tot.columns=ind
    
    if total==True:
        crosstab=pd.concat([tot, crosstab], axis=1, sort=False)
    else:
        crosstab=crosstab
    crosstab.reset_index(inplace=True)  
    crosstab['var']= crosstab['var'].astype('category').cat.reorder_categories(rows, ordered=True)   
    if (sort_count==True)&(total==True):
        crosstab.sort_values(['var', ('Всего', 'count')], ascending=[True, False], inplace=True)
    else:
        crosstab=crosstab
    crosstab.set_index(['var', 'index'], inplace=True)   
    return crosstab
